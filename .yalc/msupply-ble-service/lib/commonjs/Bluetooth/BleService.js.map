{"version":3,"sources":["BleService.ts"],"names":["dummyLogger","trace","_message","_details","debug","info","warn","error","fatal","setLogLevel","_transportKey","_newLevel","BleService","constructor","manager","logger","deviceId","connectToDevice","deviceDescriptor","device","utils","deviceDescriptorToDevice","deviceIsConnected","isDeviceConnected","id","cancelDeviceConnection","discoverAllServicesAndCharacteristicsForDevice","manufacturer","deviceType","MANUFACTURER_ID","stopDeviceScan","callback","scanOptions","scanMode","ScanMode","LowLatency","filteredCallback","err","console","log","JSON","stringify","manufacturerData","mfgId","Buffer","from","readInt16LE","BLUE_MAESTRO","BT510","descriptor","deviceToDeviceDescriptor","startDeviceScan","command","writeCharacteristicWithoutResponseForDevice","BLUETOOTH_UART_SERVICE_UUID","BLUETOOTH_READ_CHARACTERISTIC_UUID","base64FromString","transactionId","Promise","resolve","reject","subscription","monitorCharacteristicForDevice","BLUETOOTH_WRITE_CHARACTERISTIC_UUID","_","result","Math","random","toString","substr","parser","data","done","alreadyDone","transmissionDone","val","str","stringFromBase64","pattern","RegExp","test","monitoringCallback","value","push","remove","length","Error","e","message","monitor","monitorCharacteristic","all","writeCharacteristic","then","r","catch","cancelTransaction","monitorCharacteristicCallback","macAddress","connectAndDiscoverServices","downloadLogs","writeWithSingleResponse","COMMAND_CLEAR","monitorCallback","buffer","concat","slice","map","datum","bufferFromBase64","ind","findIndex","i","readInt16BE","DELIMITER_A","DELIMITER_B","reduce","acc","index","time","temperature","TEMPERATURE_DIVISOR","parse","numEvents","Number","prepareLogs","prepCommand","COMMAND_PREPARE_LOG","replace","ackLogs","ackCommand","COMMAND_ACK_LOG","sensorLog","downloadCommand","COMMAND_DOWNLOAD","dataLog","writeAndMonitor","logBuffer","round","eventType","readInt8","logInterval","clearLogs","COMMAND_UPDATE_LOG_INTERVAL","match","COMMAND_BLINK","answer","monitorResultCallback","parsedBase64","defaultInfoLog","batteryLevel","isDisabled","blueMaestroBatteryLevel","batteryLevelStringOrNull","isNaN","normaliseNumber","bt510BatteryLevel","parsedInfo","batteryVoltageMv","min","parsedIsDisabled","COMMAND_INFO","COMMAND_DISABLE_BUTTON","retriesLeft","getInfo","getInfoWithRetries","toggleButton","toggleButtonWithRetries","downloadLogsWithRetries","blink","blinkWithRetries","updateLogInterval","updateLogIntervalWithRetries","LogLevel","Verbose","BtUtilService"],"mappings":"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","sourcesContent":["import { BtUtilService } from '../BTUtilService';\n\nimport { Buffer } from 'buffer';\nimport { BLUE_MAESTRO, BT510 } from '../constants';\nimport { MacAddress } from '../types/common';\nimport {\n  Characteristic,\n  ScanOptions,\n  ScanMode,\n  TypedDevice,\n  InfoLog,\n  MonitorCharacteristicCallback,\n  MonitorCharacteristicParser,\n  ScanCallback,\n  SensorLog,\n  DataLog,\n  LogLevel,\n  Device,\n  BleError,\n} from './types';\nimport { BluetoothManager, MockOrRealDevice } from './BleManager';\n\n// types copied from mobile/src/utilities/logging/\ntype Action = (message: string | Error, details?: Record<string, unknown>) => void;\ninterface Logger {\n  trace: Action;\n  debug: Action;\n  info: Action;\n  warn: Action;\n  error: Action;\n  fatal: Action;\n  setLogLevel: (transportKey: string, newLevel: number) => void;\n}\nconst dummyLogger: Logger = {\n  trace: (_message, _details) => {\n    /*do nothing*/\n  },\n  debug: (_message, _details) => {\n    /*do nothing*/\n  },\n  info: (_message, _details) => {\n    /*do nothing*/\n  },\n  warn: (_message, _details) => {\n    /*do nothing*/\n  },\n  error: (_message, _details) => {\n    /*do nothing*/\n  },\n  fatal: (_message, _details) => {\n    /*do nothing*/\n  },\n  setLogLevel: (_transportKey, _newLevel) => {\n    /*do nothing*/\n  },\n};\n\nexport class BleService {\n  manager: BluetoothManager;\n  utils: BtUtilService;\n  logger: Logger;\n  constructor(manager: BluetoothManager, logger = dummyLogger) {\n    this.manager = manager;\n    this.logger = logger;\n    console.log(`logger is ${JSON.stringify(logger)}`);\n    manager.setLogLevel(LogLevel.Verbose);\n    // Caller passes in utils from the main app,\n    // but we ignore it and use our own.\n    // This needs to be fixed in the main app.\n    this.utils = new BtUtilService();\n    logger.info('BleService constructor called', {});\n  }\n\n  connectToDevice = (deviceId: string): Promise<MockOrRealDevice> => {\n    this.logger.info('connectToDevice', { deviceId });\n    return this.manager.connectToDevice(deviceId);\n  };\n\n  connectAndDiscoverServices = async (deviceDescriptor: string): Promise<TypedDevice> => {\n    this.logger.info('connectAndDiscoverServices', { deviceDescriptor });\n    const device = this.utils.deviceDescriptorToDevice(deviceDescriptor);\n    const deviceIsConnected = await this.manager.isDeviceConnected(device.id);\n    this.logger.info('deviceIsConnected?', { deviceIsConnected });\n    if (deviceIsConnected) {\n      await this.manager.cancelDeviceConnection(device.id);\n    }\n    await this.connectToDevice(device.id);\n\n    await this.manager.discoverAllServicesAndCharacteristicsForDevice(device.id);\n    this.logger.info('Discovered all services and characteristics for device', {\n      id: device.id,\n      manufacturer: device.deviceType.MANUFACTURER_ID,\n    });\n    return device;\n  };\n\n  stopScan = (): void => {\n    this.manager.stopDeviceScan();\n  };\n\n  scanForSensors = (callback: ScanCallback): void => {\n    this.logger.info('scanning for sensors', {});\n    const scanOptions: ScanOptions = { scanMode: ScanMode.LowLatency };\n    const filteredCallback = (err: BleError | null, device: Device | null): void => {\n      if (err) {\n        console.log('BleService Scan Error:', JSON.stringify(err));\n      }\n\n      if (device?.manufacturerData) {\n        const mfgId = Buffer.from(device.manufacturerData, 'base64').readInt16LE(0);\n        if (mfgId === BLUE_MAESTRO.MANUFACTURER_ID || mfgId === BT510.MANUFACTURER_ID) {\n          const descriptor = this.utils.deviceToDeviceDescriptor(device.id, mfgId);\n\n          callback(err, descriptor);\n        }\n      }\n    };\n    this.manager.startDeviceScan(null, scanOptions, filteredCallback);\n  };\n\n  writeCharacteristic = async (device: TypedDevice, command: string): Promise<Characteristic> => {\n    return this.manager.writeCharacteristicWithoutResponseForDevice(\n      device.id,\n      device.deviceType.BLUETOOTH_UART_SERVICE_UUID,\n      device.deviceType.BLUETOOTH_READ_CHARACTERISTIC_UUID,\n      this.utils.base64FromString(command)\n    );\n  };\n\n  monitorCharacteristic = (\n    device: TypedDevice,\n    callback: MonitorCharacteristicCallback<boolean | SensorLog[] | InfoLog | DataLog>,\n    transactionId: string\n  ): Promise<boolean | SensorLog[] | InfoLog | DataLog> => {\n    return new Promise((resolve, reject) => {\n      const subscription = this.manager.monitorCharacteristicForDevice(\n        device.id,\n        device.deviceType.BLUETOOTH_UART_SERVICE_UUID,\n        device.deviceType.BLUETOOTH_WRITE_CHARACTERISTIC_UUID,\n        (_, result) => {\n          callback(result, resolve, reject, subscription);\n        },\n        transactionId\n      );\n    });\n  };\n\n  // https://gist.github.com/gordonbrander/2230317\n  transactionId = (): string => '_' + Math.random().toString(36).substr(2, 9);\n\n  writeAndMonitor = async (\n    device: TypedDevice,\n    command: string,\n    parser: MonitorCharacteristicParser<string[], SensorLog[] | InfoLog | DataLog>\n  ): Promise<boolean | InfoLog | SensorLog[] | DataLog> => {\n    const data: string[] = [];\n    let done = 0;\n    const alreadyDone = (): number => done++;\n\n    const transmissionDone = (val: string): boolean => {\n      const str = this.utils.stringFromBase64(val);\n      const pattern = new RegExp('.*}$'); // workaround for emacs web mode confused by bracket in a regexp literal\n      const result = pattern.test(str);\n      return result;\n    };\n\n    const monitoringCallback: MonitorCharacteristicCallback<SensorLog[] | InfoLog | DataLog> = (\n      result,\n      resolve,\n      reject,\n      subscription\n    ) => {\n      if (result?.value) {\n        data.push(result.value);\n        // return to wait for next chunk\n        if (device.deviceType === BLUE_MAESTRO || !transmissionDone(result.value)) return;\n      }\n      try {\n        subscription.remove();\n        if (device.deviceType === BT510 && alreadyDone()) {\n          // Don't call the parser more than once.\n          // (Although it probably doesn't hurt anything,\n          // since the Promise has already resolved and returned the result\n          // to the caller)\n          return;\n        }\n        if (data.length === 0) throw new Error(' callback no data returned');\n        resolve(parser(data));\n      } catch (e) {\n        reject(new Error(` callback parsing failed, ${e.message}`));\n      }\n    }; // end monitoringCallback\n\n    const transactionId = this.transactionId();\n    const monitor = this.monitorCharacteristic(device, monitoringCallback, transactionId);\n    // We only care about the result if both the write and monitor succeed.\n    return Promise.all([monitor, this.writeCharacteristic(device, command)])\n      .then(r => r[0])\n      .catch(e => {\n        this.manager.cancelTransaction(transactionId);\n        throw new Error(` writeAndMonitor rejected, ${device.id} ${e.message}`);\n      });\n  };\n\n  writeWithSingleResponse = async (\n    device: TypedDevice,\n    command: string,\n    parser: MonitorCharacteristicParser<string, boolean>\n  ): Promise<boolean | SensorLog[] | InfoLog | DataLog> => {\n    const monitorCharacteristicCallback: MonitorCharacteristicCallback<boolean> = (\n      result,\n      resolve,\n      reject,\n      subscription\n    ) => {\n      subscription?.remove();\n      if (result?.value) {\n        try {\n          resolve(parser(result.value));\n        } catch (e) {\n          reject(new Error(` callback parsing failed: ${e.message}`));\n        }\n      } else reject(new Error(` callback returns null`));\n    }; // end monitorCharacteristicCallback\n\n    const transactionId = this.transactionId();\n    const monitor = this.monitorCharacteristic(\n      device,\n      monitorCharacteristicCallback,\n      transactionId\n    );\n    // We only care about the result if both the write and monitor succeed.\n    return Promise.all([monitor, this.writeCharacteristic(device, command)])\n      .then(r => r[0])\n      .catch(e => {\n        this.manager.cancelTransaction(transactionId);\n        throw new Error(` writeWithSingleResponse rejected, ${device.id} ${e.message}`);\n      });\n  };\n\n  /** Facade for clearing logs.\n   *\n   * Connects with a sensor and clears all temperature logs.\n   *\n   * Returns a promise which resolves to boolean, which is ignored by the caller.\n   *\n   * @param {String} macAddress\n   */\n  clearLogs = async (macAddress: MacAddress): Promise<void> => {\n    const device = await this.connectAndDiscoverServices(macAddress);\n    if (device?.deviceType === BT510) {\n      await this.downloadLogs(macAddress);\n    } else {\n      await this.writeWithSingleResponse(device, BLUE_MAESTRO.COMMAND_CLEAR, data => {\n        return !!this.utils.stringFromBase64(data);\n      });\n    }\n  };\n\n  downloadLogs = async (macAddress: MacAddress): Promise<SensorLog[]> => {\n    const device = await this.connectAndDiscoverServices(macAddress);\n    this.logger.info('Download logs connected and discovered services', { macAddress });\n    const monitorCallback: MonitorCharacteristicParser<string[], SensorLog[] | DataLog> = (\n      data: string[]\n    ) => {\n      this.logger.info('Write and monitor found some data!', { data });\n      if (device.deviceType === BLUE_MAESTRO) {\n        const buffer = Buffer.concat(\n          data.slice(1).map(datum => this.utils.bufferFromBase64(datum))\n        );\n        const ind = buffer.findIndex(\n          (_, i) =>\n            (i % 2 === 0 && buffer.readInt16BE(i) === BLUE_MAESTRO.DELIMITER_A) ||\n            buffer.readInt16BE(i) === BLUE_MAESTRO.DELIMITER_B\n        );\n\n        return (buffer.slice(0, ind) as Buffer).reduce((acc: SensorLog[], _, index) => {\n          if (index % 2 !== 0) return acc;\n          return [\n            ...acc,\n            { time: '', temperature: buffer.readInt16BE(index) / BLUE_MAESTRO.TEMPERATURE_DIVISOR },\n          ];\n        }, []);\n      } else {\n        // BT510\n        const buffer = Buffer.concat(data.map(datum => this.utils.bufferFromBase64(datum)));\n        const result = JSON.parse(buffer.toString());\n        const numEvents = Number(result.result[0] / 8);\n        return { numEvents, data: result.result[1] };\n      }\n    }; // end monitor callback\n\n    if (device.deviceType === BT510) {\n      // const FIFO = '0';\n      // const LIFO = '1';\n\n      const prepareLogs = async (): Promise<boolean> => {\n        const prepCommand = BT510.COMMAND_PREPARE_LOG.replace('MODE', '0');\n\n        return (await this.writeWithSingleResponse(device, prepCommand, data => {\n          const info = this.utils.stringFromBase64(data);\n          return JSON.parse(info).result !== 0;\n        })) as boolean;\n      };\n      const ackLogs = async (numEvents: number): Promise<boolean> => {\n        const ackCommand = BT510.COMMAND_ACK_LOG.replace('NUMEVENTS', numEvents.toString());\n        return (await this.writeWithSingleResponse(device, ackCommand, data => {\n          const info = this.utils.stringFromBase64(data);\n          return JSON.parse(info).result === numEvents;\n        })) as boolean;\n      };\n\n      let sensorLog = [] as SensorLog[];\n      try {\n        while (await prepareLogs()) {\n          const downloadCommand = BT510.COMMAND_DOWNLOAD.replace('NUMEVENTS', '500');\n          const dataLog = (await this.writeAndMonitor(\n            device,\n            downloadCommand,\n            monitorCallback\n          )) as DataLog;\n          const logBuffer = this.utils.bufferFromBase64(dataLog.data);\n\n          const log = logBuffer.reduce((acc: SensorLog[], _, index) => {\n            if (index % 8 !== 0) return acc;\n            //const time = logBuffer.readInt32LE(index);\n            const temperature =\n              Math.round((logBuffer.readInt16LE(index + 4) / BT510.TEMPERATURE_DIVISOR) * 10) / 10;\n            const eventType = logBuffer.readInt8(index + 6);\n            //const salt = logBuffer.readInt8(index + 7);\n            if (eventType === 1) {\n              return [\n                ...acc,\n                {\n                  temperature,\n                },\n              ];\n            } else {\n              return [...acc];\n            }\n          }, []);\n\n          if (await ackLogs(dataLog.numEvents)) {\n            sensorLog = sensorLog.concat(log);\n          }\n        }\n      } catch (e) {\n        if (sensorLog.length === 0) {\n          throw new Error(`downloadLogs ${e.message}`);\n        }\n        // But if we partially succeeded, return that\n      }\n      return sensorLog;\n    } else {\n      const command = BLUE_MAESTRO.COMMAND_DOWNLOAD.replace('NUMEVENTS', '500');\n      const result = (await this.writeAndMonitor(device, command, monitorCallback)) as SensorLog[];\n      return result;\n    }\n  };\n\n  updateLogInterval = async (\n    macAddress: MacAddress,\n    logInterval: number,\n    clearLogs = true\n  ): Promise<boolean> => {\n    const device = await this.connectAndDiscoverServices(macAddress);\n\n    const command = device.deviceType.COMMAND_UPDATE_LOG_INTERVAL.replace(\n      'LOG_INTERVAL',\n      logInterval.toString()\n    );\n    const result = await this.writeWithSingleResponse(device, command, data => {\n      const info = this.utils.stringFromBase64(data);\n      return (\n        (device.deviceType === BT510 && JSON.parse(info).result === 'ok') ||\n        !!info.match(/interval/i)\n      );\n    });\n    // Clear logs if we haven't just downloaded\n    // BlueMaestro automatically clears logs when log interval is set,\n    // But we have to download all the logs to clear them on BT510\n    if (clearLogs && device.deviceType === BT510) {\n      await this.downloadLogs(macAddress);\n    }\n    if (result) return true;\n    throw new Error(` command returned not OK result`);\n  };\n\n  blink = async (macAddress: MacAddress): Promise<boolean> => {\n    const device = await this.connectAndDiscoverServices(macAddress);\n    const result = (await this.writeWithSingleResponse(\n      device,\n      device.deviceType.COMMAND_BLINK,\n      data => {\n        const answer = this.utils.stringFromBase64(data);\n        return !!answer.match(/ok/i);\n      }\n    )) as boolean;\n\n    if (result) return true;\n    throw new Error(` acknowledgement false`);\n  };\n\n  getInfo = async (macAddress: MacAddress): Promise<InfoLog> => {\n    const device = await this.connectAndDiscoverServices(macAddress);\n    const monitorResultCallback: MonitorCharacteristicParser<string[], InfoLog> = data => {\n      const parsedBase64 = data.map(this.utils.stringFromBase64);\n      const defaultInfoLog: InfoLog = { batteryLevel: null, isDisabled: true };\n      const blueMaestroBatteryLevel = (info: string): number | null => {\n        const batteryLevelStringOrNull = info.match(/Batt lvl: [0-9]{1,3}/);\n\n        if (!batteryLevelStringOrNull) return batteryLevelStringOrNull;\n\n        const batteryLevel = Number(batteryLevelStringOrNull[0].match(/[0-9]{1,3}/));\n\n        return Number.isNaN(batteryLevel)\n          ? null\n          : this.utils.normaliseNumber(batteryLevel, [75, 100]);\n      };\n\n      const bt510BatteryLevel = (info: string): number | null => {\n        let batteryLevel = null;\n        if (info) {\n          const parsedInfo = JSON.parse(info);\n\n          if (parsedInfo?.result !== 'ok') {\n            return null;\n          }\n\n          batteryLevel = Number(parsedInfo.batteryVoltageMv);\n        } else {\n          return null;\n        }\n        return Number.isNaN(batteryLevel)\n          ? null\n          : this.utils.normaliseNumber(Math.min(batteryLevel, 3000), [2250, 3000]);\n      };\n\n      const parsedIsDisabled = (info: string): boolean => !!info.match(/Btn on\\/off: 1/);\n\n      if (device.deviceType === BLUE_MAESTRO) {\n        return parsedBase64.reduce((acc, info) => {\n          const isDisabled = parsedIsDisabled(info);\n          const batteryLevel = blueMaestroBatteryLevel(info);\n          if (isDisabled) return { ...acc, isDisabled };\n          if (batteryLevel) return { ...acc, batteryLevel };\n          return acc;\n        }, defaultInfoLog);\n      } else {\n        return { batteryLevel: bt510BatteryLevel(parsedBase64[0]), isDisabled: true };\n      }\n    };\n\n    const result: InfoLog = (await this.writeAndMonitor(\n      device,\n      device.deviceType.COMMAND_INFO,\n      monitorResultCallback\n    )) as InfoLog;\n\n    return result;\n  };\n\n  toggleButton = async (macAddress: MacAddress): Promise<boolean> => {\n    const device = await this.connectAndDiscoverServices(macAddress);\n    if (device.deviceType === BT510) {\n      // Laird doesn't have this command\n      return true;\n    }\n    const result = (await this.writeWithSingleResponse(\n      device,\n      BLUE_MAESTRO.COMMAND_DISABLE_BUTTON,\n      data => {\n        return !!this.utils.stringFromBase64(data).match(/ok/i);\n      }\n    )) as boolean;\n    return result;\n  };\n\n  getInfoWithRetries = async (\n    macAddress: MacAddress,\n    retriesLeft: number,\n    error: Error | null\n  ): Promise<InfoLog> => {\n    if (!retriesLeft) throw error;\n\n    return this.getInfo(macAddress).catch(err =>\n      this.getInfoWithRetries(macAddress, retriesLeft - 1, err)\n    );\n  };\n\n  toggleButtonWithRetries = async (\n    macAddress: MacAddress,\n    retriesLeft: number,\n    error: Error | null\n  ): Promise<boolean> => {\n    if (!retriesLeft) throw error;\n\n    return this.toggleButton(macAddress).catch(err =>\n      this.toggleButtonWithRetries(macAddress, retriesLeft - 1, err)\n    );\n  };\n\n  downloadLogsWithRetries = async (\n    macAddress: MacAddress,\n    retriesLeft: number,\n    error: Error | null\n  ): Promise<SensorLog[]> => {\n    this.logger.info('Starting to download logs', { macAddress, retriesLeft, error });\n    if (!retriesLeft) throw error;\n\n    return this.downloadLogs(macAddress).catch(err =>\n      this.downloadLogsWithRetries(macAddress, retriesLeft - 1, err)\n    );\n  };\n\n  blinkWithRetries = async (\n    macAddress: MacAddress,\n    retriesLeft: number,\n    error: Error | null\n  ): Promise<boolean> => {\n    if (!retriesLeft) throw error;\n\n    return this.blink(macAddress).catch(err =>\n      this.blinkWithRetries(macAddress, retriesLeft - 1, err)\n    );\n  };\n\n  updateLogIntervalWithRetries = async (\n    macAddress: MacAddress,\n    logInterval: number,\n    retriesLeft: number,\n    clearLogs: boolean,\n    error: Error | null\n  ): Promise<boolean> => {\n    if (!retriesLeft) throw error;\n\n    return this.updateLogInterval(macAddress, logInterval, clearLogs).catch(err =>\n      this.updateLogIntervalWithRetries(macAddress, logInterval, retriesLeft - 1, clearLogs, err)\n    );\n  };\n}\n"]}