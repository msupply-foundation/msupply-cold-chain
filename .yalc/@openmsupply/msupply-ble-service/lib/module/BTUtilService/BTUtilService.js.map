{"version":3,"sources":["BTUtilService.ts"],"names":["Buffer","BT510","BLUE_MAESTRO","BtUtilService","celsius","Math","round","base64","from","bufferFromBase64","toString","string","currentVal","oldRange","newRange","oldMin","oldMax","newMin","newMax","newVal","floor","macAddress","parts","split","id","trim","deviceType","deviceId","mfgId","MANUFACTURER_ID"],"mappings":";;AAAA,SAASA,MAAT,QAAuB,QAAvB;AAEA,SAASC,KAAT,EAAgBC,YAAhB,QAAoC,cAApC;AAGA,OAAO,MAAMC,aAAN,CAAoB;AAAA;AAAA,0CAITC,OAAD,IAA6BC,IAAI,CAACC,KAAL,CAAYF,OAAO,GAAG,GAAX,GAAkB,GAA7B,IAAoC,KAJvD;;AAAA,8CAMLG,MAAD,IAA4BP,MAAM,CAACQ,IAAP,CAAYD,MAAZ,EAAoB,QAApB,CANtB;;AAAA,8CAQLA,MAAD,IAA4B,KAAKE,gBAAL,CAAsBF,MAAtB,EAA8BG,QAA9B,CAAuC,OAAvC,CARtB;;AAAA,8CAULC,MAAD,IAA4BX,MAAM,CAACQ,IAAP,CAAYG,MAAZ,EAAoB,OAApB,EAA6BD,QAA7B,CAAsC,QAAtC,CAVtB;;AAAA,6CAeP,CAACE,UAAD,EAAqBC,QAArB,EAA4CC,QAAQ,GAAG,CAAC,CAAD,EAAI,GAAJ,CAAvD,KAA4E;AAC5F,YAAM,CAACC,MAAD,EAASC,MAAT,IAAmBH,QAAzB;AACA,YAAM,CAACI,MAAD,EAASC,MAAT,IAAmBJ,QAAzB;AAEA,YAAMK,MAAM,GAAI,CAACP,UAAU,GAAGG,MAAd,KAAyBG,MAAM,GAAGD,MAAlC,CAAD,IAA+CD,MAAM,GAAGD,MAAxD,IAAkEE,MAAjF;AAEA,aAAOZ,IAAI,CAACe,KAAL,CAAWD,MAAX,CAAP;AACD,KAtBwB;;AAAA,sDAuBGE,UAAD,IAAqC;AAAA;;AAC9D,YAAMC,KAAK,GAAGD,UAAU,CAACE,KAAX,CAAiB,GAAjB,CAAd;AACA,aAAO;AACLC,QAAAA,EAAE,EAAEF,KAAK,CAAC,CAAD,CAAL,CAASG,IAAT,EADC;AAEL;AACA;AACAC,QAAAA,UAAU,UAAG,YAAAJ,KAAK,CAAC,CAAD,CAAL,oDAAUG,IAAV,QAAqB,OAArB,GAA+BxB,KAA/B,GAAuCC,YAA1C,uCAA2DA;AAJhE,OAAP;AAMD,KA/BwB;;AAAA,sDAgCE,CACzByB,QADyB,EAEzBC,KAFyB,KAGd;AACX,YAAMF,UAAU,GAAGE,KAAK,KAAK1B,YAAY,CAAC2B,eAAvB,GAAyC,cAAzC,GAA0D,OAA7E;AACA,aAAQ,GAAEF,QAAS,MAAKD,UAAW,EAAnC;AACD,KAtCwB;AAAA;;AAAA","sourcesContent":["import { Buffer } from 'buffer';\nimport { TypedDevice } from '../Bluetooth/types';\nimport { BT510, BLUE_MAESTRO } from '../constants';\ntype NumberRange = [number, number];\n\nexport class BtUtilService {\n  /**\n   * Convert to Fahrenheit\n   */\n  toFahrenheit = (celsius: number): number => Math.round((celsius * 9.0) / 5.0) + 320.0;\n\n  bufferFromBase64 = (base64: string): Buffer => Buffer.from(base64, 'base64');\n\n  stringFromBase64 = (base64: string): string => this.bufferFromBase64(base64).toString('utf-8');\n\n  base64FromString = (string: string): string => Buffer.from(string, 'utf-8').toString('base64');\n  /**\n   * Normalises a number within some number range i.e. [75-100] into the corresponding\n   * number within 0-100.\n   */\n  normaliseNumber = (currentVal: number, oldRange: NumberRange, newRange = [0, 100]): number => {\n    const [oldMin, oldMax] = oldRange;\n    const [newMin, newMax] = newRange;\n\n    const newVal = ((currentVal - oldMin) * (newMax - newMin)) / (oldMax - oldMin) + newMin;\n\n    return Math.floor(newVal);\n  };\n  deviceDescriptorToDevice = (macAddress: string): TypedDevice => {\n    const parts = macAddress.split('|');\n    return {\n      id: parts[0].trim(),\n      // If the descriptor doesn't have a device field, it's a Blue Maestro that\n      // was previously paired.\n      deviceType: (parts[1]?.trim() === 'BT510' ? BT510 : BLUE_MAESTRO) ?? BLUE_MAESTRO,\n    };\n  };\n  deviceToDeviceDescriptor = (\n    deviceId: string,\n    mfgId: BLUE_MAESTRO.MANUFACTURER_ID | BT510.MANUFACTURER_ID\n  ): string => {\n    const deviceType = mfgId === BLUE_MAESTRO.MANUFACTURER_ID ? 'BLUE_MAESTRO' : 'BT510';\n    return `${deviceId} | ${deviceType}`;\n  };\n}\n"]}