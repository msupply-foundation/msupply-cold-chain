{"version":3,"sources":["BleService.ts"],"names":["BtUtilService","Buffer","BLUE_MAESTRO","BT510","MILLISECONDS","ScanMode","LogLevel","dummyLogger","trace","_message","_details","debug","info","warn","error","fatal","setLogLevel","_transportKey","_newLevel","RETRY_DELAY","ONE_SECOND","sleep","delay","Promise","resolve","setTimeout","BleService","constructor","manager","logger","deviceId","connectToDevice","e","message","deviceDescriptor","device","utils","deviceDescriptorToDevice","deviceType","cancelDeviceConnection","id","deviceIsConnected","isDeviceConnected","discoverAllServicesAndCharacteristicsForDevice","MANUFACTURER_ID","stopDeviceScan","callback","scanOptions","scanMode","LowLatency","filteredCallback","err","console","log","JSON","stringify","manufacturerData","mfgId","from","readInt16LE","descriptor","deviceToDeviceDescriptor","startDeviceScan","command","writeCharacteristicWithoutResponseForDevice","BLUETOOTH_UART_SERVICE_UUID","BLUETOOTH_READ_CHARACTERISTIC_UUID","base64FromString","transactionId","reject","subscription","monitorCharacteristicForDevice","BLUETOOTH_WRITE_CHARACTERISTIC_UUID","result","Math","random","toString","substr","parser","data","done","alreadyDone","transmissionDone","val","str","stringFromBase64","pattern","RegExp","test","monitoringCallback","Boolean","value","name","reason","push","remove","length","Error","monitor","monitorCharacteristic","all","writeCharacteristic","then","r","catch","cancelTransaction","monitorCharacteristicCallback","macAddress","connectAndDiscoverServices","downloadLogs","writeWithSingleResponse","COMMAND_CLEAR","monitorCallback","join","buffer","concat","slice","map","datum","bufferFromBase64","ind","findIndex","_","i","readInt16BE","DELIMITER_A","DELIMITER_B","reduce","acc","index","time","temperature","TEMPERATURE_DIVISOR","parse","numEvents","Number","prepareLogs","prepCommand","COMMAND_PREPARE_LOG","replace","ackLogs","ackCommand","COMMAND_ACK_LOG","sensorLog","downloadCommand","COMMAND_DOWNLOAD","dataLog","writeAndMonitor","logBuffer","round","eventType","readInt8","logInterval","clearLogs","COMMAND_UPDATE_LOG_INTERVAL","match","COMMAND_BLINK","answer","monitorResultCallback","parsedBase64","defaultInfoLog","batteryLevel","isDisabled","blueMaestroBatteryLevel","batteryLevelStringOrNull","isNaN","normaliseNumber","bt510BatteryLevel","parsedInfo","batteryVoltageMv","min","parsedIsDisabled","COMMAND_INFO","COMMAND_DISABLE_BUTTON","retriesLeft","getInfo","getInfoWithRetries","toggleButton","toggleButtonWithRetries","downloadLogsWithRetries","blink","blinkWithRetries","updateLogInterval","updateLogIntervalWithRetries","Verbose"],"mappings":"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","sourcesContent":["import { BtUtilService } from '../BTUtilService';\n\nimport { Buffer } from 'buffer';\nimport { BLUE_MAESTRO, BT510, MILLISECONDS } from '../constants';\nimport { MacAddress } from '../types/common';\nimport {\n  Characteristic,\n  ScanOptions,\n  ScanMode,\n  TypedDevice,\n  InfoLog,\n  MonitorCharacteristicCallback,\n  MonitorCharacteristicParser,\n  ScanCallback,\n  SensorLog,\n  DataLog,\n  LogLevel,\n  Device,\n  BleError,\n} from './types';\nimport { BluetoothManager, MockOrRealDevice } from './BleManager';\n\n// types copied from mobile/src/utilities/logging/\ntype Action = (message: string | Error, details?: Record<string, unknown>) => void;\ninterface Logger {\n  trace: Action;\n  debug: Action;\n  info: Action;\n  warn: Action;\n  error: Action;\n  fatal: Action;\n  setLogLevel: (transportKey: string, newLevel: number) => void;\n}\nconst dummyLogger: Logger = {\n  trace: (_message, _details) => {\n    /*do nothing*/\n  },\n  debug: (_message, _details) => {\n    /*do nothing*/\n  },\n  info: (_message, _details) => {\n    /*do nothing*/\n  },\n  warn: (_message, _details) => {\n    /*do nothing*/\n  },\n  error: (_message, _details) => {\n    /*do nothing*/\n  },\n  fatal: (_message, _details) => {\n    /*do nothing*/\n  },\n  setLogLevel: (_transportKey, _newLevel) => {\n    /*do nothing*/\n  },\n};\n\nconst RETRY_DELAY = MILLISECONDS.ONE_SECOND;\nconst sleep = (delay: number) => new Promise(resolve => setTimeout(resolve, delay));\n\nexport class BleService {\n  manager: BluetoothManager;\n  utils: BtUtilService;\n  logger: Logger;\n\n  constructor(manager: BluetoothManager, logger = dummyLogger) {\n    this.manager = manager;\n    this.logger = logger;\n    manager.setLogLevel(LogLevel.Verbose);\n    // Caller passes in utils from the main app,\n    // but we ignore it and use our own.\n    // This needs to be fixed in the main app.\n    this.utils = new BtUtilService();\n    logger.info('BleService constructor called');\n  }\n\n  connectToDevice = (deviceId: string): Promise<MockOrRealDevice> => {\n    this.logger.debug(`${deviceId} Connect to device`);\n    try {\n      return this.manager.connectToDevice(deviceId);\n    } catch (e) {\n      this.logger.error(`${deviceId} Error connecting to device. ${e.message}`);\n      throw e;\n    }\n  };\n\n  connectAndDiscoverServices = async (deviceDescriptor: string): Promise<TypedDevice> => {\n    this.logger.info(`${deviceDescriptor} connectAndDiscoverServices`);\n    const device = this.utils.deviceDescriptorToDevice(deviceDescriptor);\n    // the Blue Maestro devices are incorrectly reporting connection status\n    // thus: deviceIsConnected?\t{ deviceIsConnected: true }\n    // then if disconnecting [BleError: Device D7:D6:67:E0:02:34 is not connected]\n    // in which case an error is thrown when trying to connect: [BleError: Device ? is already connected]\n    // to work around this, we disconnect the device, ignoring any errors, before connecting again\n    if (device.deviceType === BLUE_MAESTRO) {\n      this.logger.debug(`${deviceDescriptor} Connecting to BM device`);\n      try {\n        await this.manager.cancelDeviceConnection(device.id);\n      } catch (e) {\n        this.logger.warn(`${deviceDescriptor} Error disconnecting! ${e.message}`);\n        // ignore error\n      }\n    } else {\n      this.logger.debug(`${deviceDescriptor} Connecting to other device`);\n      const deviceIsConnected = await this.manager.isDeviceConnected(device.id);\n      if (deviceIsConnected) {\n        this.logger.debug(`${deviceDescriptor} Disconnecting`);\n        await this.manager.cancelDeviceConnection(device.id);\n      }\n    }\n    await this.connectToDevice(device.id);\n    this.logger.debug(`${device.id} Connected to ${deviceDescriptor}`);\n\n    await this.manager.discoverAllServicesAndCharacteristicsForDevice(device.id);\n    this.logger.info(\n      `${deviceDescriptor} Discovered all services and characteristics. id: ${device.id} manufacturer: ${device.deviceType.MANUFACTURER_ID}`\n    );\n\n    return device;\n  };\n\n  stopScan = (): void => {\n    this.manager.stopDeviceScan();\n  };\n\n  scanForSensors = (callback: ScanCallback): void => {\n    this.logger.info('Scanning for sensors');\n    const scanOptions: ScanOptions = { scanMode: ScanMode.LowLatency };\n    const filteredCallback = (err: BleError | null, device: Device | null): void => {\n      if (err) {\n        console.log('BleService Scan Error:', JSON.stringify(err));\n      }\n\n      if (device?.manufacturerData) {\n        const mfgId = Buffer.from(device.manufacturerData, 'base64').readInt16LE(0);\n        if (mfgId === BLUE_MAESTRO.MANUFACTURER_ID || mfgId === BT510.MANUFACTURER_ID) {\n          const descriptor = this.utils.deviceToDeviceDescriptor(device.id, mfgId);\n\n          callback(err, descriptor);\n        }\n      }\n    };\n    this.manager.startDeviceScan(null, scanOptions, filteredCallback);\n  };\n\n  writeCharacteristic = async (device: TypedDevice, command: string): Promise<Characteristic> => {\n    return this.manager.writeCharacteristicWithoutResponseForDevice(\n      device.id,\n      device.deviceType.BLUETOOTH_UART_SERVICE_UUID,\n      device.deviceType.BLUETOOTH_READ_CHARACTERISTIC_UUID,\n      this.utils.base64FromString(command)\n    );\n  };\n\n  monitorCharacteristic = (\n    device: TypedDevice,\n    callback: MonitorCharacteristicCallback<boolean | SensorLog[] | InfoLog | DataLog>,\n    transactionId: string\n  ): Promise<boolean | SensorLog[] | InfoLog | DataLog> => {\n    return new Promise((resolve, reject) => {\n      const subscription = this.manager.monitorCharacteristicForDevice(\n        device.id,\n        device.deviceType.BLUETOOTH_UART_SERVICE_UUID,\n        device.deviceType.BLUETOOTH_WRITE_CHARACTERISTIC_UUID,\n        (error, result) => {\n          callback(result, resolve, reject, subscription, error);\n        },\n        transactionId\n      );\n    });\n  };\n\n  // https://gist.github.com/gordonbrander/2230317\n  transactionId = (): string => '_' + Math.random().toString(36).substr(2, 9);\n\n  writeAndMonitor = async (\n    device: TypedDevice,\n    command: string,\n    parser: MonitorCharacteristicParser<string[], SensorLog[] | InfoLog | DataLog>\n  ): Promise<boolean | InfoLog | SensorLog[] | DataLog> => {\n    const data: string[] = [];\n    let done = 0;\n    const alreadyDone = (): number => done++;\n\n    const transmissionDone = (val: string): boolean => {\n      const str = this.utils.stringFromBase64(val);\n      const pattern = new RegExp('.*}$'); // workaround for emacs web mode confused by bracket in a regexp literal\n      const result = pattern.test(str);\n      return result;\n    };\n\n    const monitoringCallback: MonitorCharacteristicCallback<SensorLog[] | InfoLog | DataLog> = (\n      result,\n      resolve,\n      reject,\n      subscription,\n      error\n    ) => {\n      this.logger.debug(`${device.id} Monitor command: ${command}`);\n      this.logger.debug(`${device.id} Monitor callback result valid: ${Boolean(result?.value)}`);\n      if (error) {\n        this.logger.debug(`${device.id} Monitor callback error name: ${error.name}`);\n        this.logger.debug(`${device.id} Monitor callback error message: ${error.message}`);\n        this.logger.debug(`${device.id} Monitor callback error reason: ${error.reason}`);\n      }\n\n      if (result?.value) {\n        data.push(result.value);\n        // return to wait for next chunk\n        if (device.deviceType === BLUE_MAESTRO || !transmissionDone(result.value)) return;\n      }\n      try {\n        subscription.remove();\n        if (device.deviceType === BT510 && alreadyDone()) {\n          // Don't call the parser more than once.\n          // (Although it probably doesn't hurt anything,\n          // since the Promise has already resolved and returned the result\n          // to the caller)\n          return;\n        }\n        this.logger.debug(`${device.id} Monitor callback. Data length: ${data.length}`);\n\n        if (data.length === 0) throw new Error(' callback no data returned');\n        resolve(parser(data));\n      } catch (e) {\n        reject(new Error(` callback parsing failed, ${e.message}`));\n      }\n    }; // end monitoringCallback\n\n    const transactionId = this.transactionId();\n    const monitor = this.monitorCharacteristic(device, monitoringCallback, transactionId);\n\n    // We only care about the result if both the write and monitor succeed.\n    return Promise.all([monitor, this.writeCharacteristic(device, command)])\n      .then(r => r[0])\n      .catch(e => {\n        this.manager.cancelTransaction(transactionId);\n        this.logger.error(`${device.id}  writeAndMonitor rejected. ${e.message}`);\n        throw new Error(` writeAndMonitor rejected, ${device.id} ${e.message}`);\n      });\n  };\n\n  writeWithSingleResponse = async (\n    device: TypedDevice,\n    command: string,\n    parser: MonitorCharacteristicParser<string, boolean>\n  ): Promise<boolean | SensorLog[] | InfoLog | DataLog> => {\n    const monitorCharacteristicCallback: MonitorCharacteristicCallback<boolean> = (\n      result,\n      resolve,\n      reject,\n      subscription\n    ) => {\n      subscription?.remove();\n      if (result?.value) {\n        try {\n          resolve(parser(result.value));\n        } catch (e) {\n          reject(new Error(` callback parsing failed: ${e.message}`));\n        }\n      } else reject(new Error(` callback returns null`));\n    }; // end monitorCharacteristicCallback\n\n    const transactionId = this.transactionId();\n    const monitor = this.monitorCharacteristic(\n      device,\n      monitorCharacteristicCallback,\n      transactionId\n    );\n    // We only care about the result if both the write and monitor succeed.\n    return Promise.all([monitor, this.writeCharacteristic(device, command)])\n      .then(r => r[0])\n      .catch(e => {\n        this.manager.cancelTransaction(transactionId);\n        throw new Error(` writeWithSingleResponse rejected, ${device.id} ${e.message}`);\n      });\n  };\n\n  /** Facade for clearing logs.\n   *\n   * Connects with a sensor and clears all temperature logs.\n   *\n   * Returns a promise which resolves to boolean, which is ignored by the caller.\n   *\n   * @param {String} macAddress\n   */\n  clearLogs = async (macAddress: MacAddress): Promise<void> => {\n    this.logger.debug(`${macAddress} Clearing logs`);\n    const device = await this.connectAndDiscoverServices(macAddress);\n    if (device?.deviceType === BT510) {\n      await this.downloadLogs(macAddress);\n    } else {\n      await this.writeWithSingleResponse(\n        device,\n        BLUE_MAESTRO.COMMAND_CLEAR,\n        data => !!this.utils.stringFromBase64(data)\n      );\n    }\n  };\n\n  downloadLogs = async (macAddress: MacAddress): Promise<SensorLog[]> => {\n    this.logger.debug(`${macAddress} Download logs`);\n    const device = await this.connectAndDiscoverServices(macAddress);\n    this.logger.info(`${macAddress} Download logs connected and discovered services`);\n    const monitorCallback: MonitorCharacteristicParser<string[], SensorLog[] | DataLog> = (\n      data: string[]\n    ) => {\n      this.logger.info(`${macAddress} Write and monitor found some data! ${data.length}`);\n      this.logger.debug(`${macAddress} ${data.join('; ')}`);\n      if (device.deviceType === BLUE_MAESTRO) {\n        const buffer = Buffer.concat(\n          data.slice(1).map(datum => this.utils.bufferFromBase64(datum))\n        );\n        const ind = buffer.findIndex(\n          (_, i) =>\n            (i % 2 === 0 && buffer.readInt16BE(i) === BLUE_MAESTRO.DELIMITER_A) ||\n            buffer.readInt16BE(i) === BLUE_MAESTRO.DELIMITER_B\n        );\n\n        return (buffer.slice(0, ind) as Buffer).reduce((acc: SensorLog[], _, index) => {\n          if (index % 2 !== 0) return acc;\n          return [\n            ...acc,\n            { time: '', temperature: buffer.readInt16BE(index) / BLUE_MAESTRO.TEMPERATURE_DIVISOR },\n          ];\n        }, []);\n      } else {\n        // BT510\n        const buffer = Buffer.concat(data.map(datum => this.utils.bufferFromBase64(datum)));\n        const result = JSON.parse(buffer.toString());\n        const numEvents = Number(result.result[0] / 8);\n        return { numEvents, data: result.result[1] };\n      }\n    }; // end monitor callback\n\n    if (device.deviceType === BT510) {\n      // const FIFO = '0';\n      // const LIFO = '1';\n      this.logger.debug(`${macAddress} Preparing to download logs`);\n      const prepareLogs = async (): Promise<boolean> => {\n        const prepCommand = BT510.COMMAND_PREPARE_LOG.replace('MODE', '0');\n\n        return (await this.writeWithSingleResponse(device, prepCommand, data => {\n          const info = this.utils.stringFromBase64(data);\n          this.logger.debug(`${macAddress} Prepare logs response: ${info}`);\n          return JSON.parse(info).result !== 0;\n        })) as boolean;\n      };\n      const ackLogs = async (numEvents: number): Promise<boolean> => {\n        const ackCommand = BT510.COMMAND_ACK_LOG.replace('NUMEVENTS', numEvents.toString());\n        return (await this.writeWithSingleResponse(device, ackCommand, data => {\n          const info = this.utils.stringFromBase64(data);\n          return JSON.parse(info).result === numEvents;\n        })) as boolean;\n      };\n\n      let sensorLog = [] as SensorLog[];\n      try {\n        while (await prepareLogs()) {\n          const downloadCommand = BT510.COMMAND_DOWNLOAD.replace('NUMEVENTS', '500');\n          this.logger.debug(`${macAddress} Sending download command`);\n          const dataLog = (await this.writeAndMonitor(\n            device,\n            downloadCommand,\n            monitorCallback\n          )) as DataLog;\n          const logBuffer = this.utils.bufferFromBase64(dataLog.data);\n\n          const log = logBuffer.reduce((acc: SensorLog[], _, index) => {\n            if (index % 8 !== 0) return acc;\n            //const time = logBuffer.readInt32LE(index);\n            const temperature =\n              Math.round((logBuffer.readInt16LE(index + 4) / BT510.TEMPERATURE_DIVISOR) * 10) / 10;\n            const eventType = logBuffer.readInt8(index + 6);\n            //const salt = logBuffer.readInt8(index + 7);\n            if (eventType === 1) {\n              return [\n                ...acc,\n                {\n                  temperature,\n                },\n              ];\n            } else {\n              return [...acc];\n            }\n          }, []);\n\n          if (await ackLogs(dataLog.numEvents)) {\n            this.logger.debug(`${macAddress} Ack received`);\n            sensorLog = sensorLog.concat(log);\n          }\n        }\n      } catch (e) {\n        this.logger.error(`${macAddress} Error downloading logs. ${e.message}`);\n        if (sensorLog.length === 0) {\n          throw new Error(`downloadLogs ${e.message}`);\n        }\n        // But if we partially succeeded, return that\n      }\n      return sensorLog;\n    } else {\n      try {\n        const command = BLUE_MAESTRO.COMMAND_DOWNLOAD.replace('NUMEVENTS', '500');\n        this.logger.debug(`${macAddress} Sending download command`);\n        const result = (await this.writeAndMonitor(\n          device,\n          command,\n          monitorCallback\n        )) as SensorLog[];\n        return result;\n      } catch (e) {\n        this.logger.error(`${macAddress} Error downloading logs! ${e.message}`);\n        throw new Error(`downloadLogs ${e.message}`);\n      }\n    }\n  };\n\n  updateLogInterval = async (\n    macAddress: MacAddress,\n    logInterval: number,\n    clearLogs = true\n  ): Promise<boolean> => {\n    this.logger.debug(`${macAddress} Update log interval`);\n    const device = await this.connectAndDiscoverServices(macAddress);\n\n    const command = device.deviceType.COMMAND_UPDATE_LOG_INTERVAL.replace(\n      'LOG_INTERVAL',\n      logInterval.toString()\n    );\n    const result = await this.writeWithSingleResponse(device, command, data => {\n      const info = this.utils.stringFromBase64(data);\n      return (\n        (device.deviceType === BT510 && JSON.parse(info).result === 'ok') ||\n        !!info.match(/interval/i)\n      );\n    });\n    // Clear logs if we haven't just downloaded\n    // BlueMaestro automatically clears logs when log interval is set,\n    // But we have to download all the logs to clear them on BT510\n    if (clearLogs && device.deviceType === BT510) {\n      await this.downloadLogs(macAddress);\n    }\n    if (result) return true;\n    throw new Error(` command returned not OK result`);\n  };\n\n  blink = async (macAddress: MacAddress): Promise<boolean> => {\n    this.logger.debug(`${macAddress} Blink`);\n    const device = await this.connectAndDiscoverServices(macAddress);\n    const result = (await this.writeWithSingleResponse(\n      device,\n      device.deviceType.COMMAND_BLINK,\n      data => {\n        const answer = this.utils.stringFromBase64(data);\n        return !!answer.match(/ok/i);\n      }\n    )) as boolean;\n\n    if (result) return true;\n    throw new Error(` acknowledgement false`);\n  };\n\n  getInfo = async (macAddress: MacAddress): Promise<InfoLog> => {\n    this.logger.debug(`${macAddress} Get info`);\n    const device = await this.connectAndDiscoverServices(macAddress);\n    const monitorResultCallback: MonitorCharacteristicParser<string[], InfoLog> = data => {\n      const parsedBase64 = data.map(this.utils.stringFromBase64);\n      const defaultInfoLog: InfoLog = { batteryLevel: null, isDisabled: true };\n      const blueMaestroBatteryLevel = (info: string): number | null => {\n        const batteryLevelStringOrNull = info.match(/Batt lvl: [0-9]{1,3}/);\n\n        if (!batteryLevelStringOrNull) return batteryLevelStringOrNull;\n\n        const batteryLevel = Number(batteryLevelStringOrNull[0].match(/[0-9]{1,3}/));\n\n        return Number.isNaN(batteryLevel)\n          ? null\n          : this.utils.normaliseNumber(batteryLevel, [75, 100]);\n      };\n\n      const bt510BatteryLevel = (info: string): number | null => {\n        let batteryLevel: number | null = null;\n        if (info) {\n          const parsedInfo = JSON.parse(info);\n\n          if (parsedInfo?.result !== 'ok') {\n            return null;\n          }\n\n          batteryLevel = Number(parsedInfo.batteryVoltageMv);\n        } else {\n          return null;\n        }\n        return Number.isNaN(batteryLevel)\n          ? null\n          : this.utils.normaliseNumber(Math.min(batteryLevel, 3000), [2250, 3000]);\n      };\n\n      const parsedIsDisabled = (info: string): boolean => !!info.match(/Btn on\\/off: 1/);\n\n      if (device.deviceType === BLUE_MAESTRO) {\n        return parsedBase64.reduce((acc, info) => {\n          const isDisabled = parsedIsDisabled(info);\n          const batteryLevel = blueMaestroBatteryLevel(info);\n          if (isDisabled) return { ...acc, isDisabled };\n          if (batteryLevel) return { ...acc, batteryLevel };\n          return acc;\n        }, defaultInfoLog);\n      } else {\n        return { batteryLevel: bt510BatteryLevel(parsedBase64[0]), isDisabled: true };\n      }\n    };\n\n    const result: InfoLog = (await this.writeAndMonitor(\n      device,\n      device.deviceType.COMMAND_INFO,\n      monitorResultCallback\n    )) as InfoLog;\n\n    return result;\n  };\n\n  toggleButton = async (macAddress: MacAddress): Promise<boolean> => {\n    this.logger.debug(`${macAddress} Toggle button`);\n    const device = await this.connectAndDiscoverServices(macAddress);\n    if (device.deviceType === BT510) {\n      // Laird doesn't have this command\n      return true;\n    }\n    const result = (await this.writeWithSingleResponse(\n      device,\n      BLUE_MAESTRO.COMMAND_DISABLE_BUTTON,\n      data => {\n        return !!this.utils.stringFromBase64(data).match(/ok/i);\n      }\n    )) as boolean;\n    return result;\n  };\n\n  getInfoWithRetries = async (\n    macAddress: MacAddress,\n    retriesLeft: number,\n    error: Error | null\n  ): Promise<InfoLog> => {\n    if (!retriesLeft) {\n      this.logger.error(`${macAddress} getInfoWithRetries failed. ${error?.message}`);\n      throw error;\n    }\n\n    await sleep(RETRY_DELAY);\n\n    return this.getInfo(macAddress).catch(err =>\n      this.getInfoWithRetries(macAddress, retriesLeft - 1, err)\n    );\n  };\n\n  toggleButtonWithRetries = async (\n    macAddress: MacAddress,\n    retriesLeft: number,\n    error: Error | null\n  ): Promise<boolean> => {\n    if (!retriesLeft) throw error;\n\n    await sleep(RETRY_DELAY);\n\n    return this.toggleButton(macAddress).catch(err =>\n      this.toggleButtonWithRetries(macAddress, retriesLeft - 1, err)\n    );\n  };\n\n  downloadLogsWithRetries = async (\n    macAddress: MacAddress,\n    retriesLeft: number,\n    error: Error | null\n  ): Promise<SensorLog[]> => {\n    this.logger.info(`${macAddress} Download logs with retries`);\n    this.logger.debug(\n      `${macAddress} Starting to download logs. There are ${retriesLeft} retries left. Error: ${error?.message}`\n    );\n    if (!retriesLeft) throw error;\n\n    await sleep(RETRY_DELAY);\n\n    return this.downloadLogs(macAddress).catch(err =>\n      this.downloadLogsWithRetries(macAddress, retriesLeft - 1, err)\n    );\n  };\n\n  blinkWithRetries = async (\n    macAddress: MacAddress,\n    retriesLeft: number,\n    error: Error | null\n  ): Promise<boolean> => {\n    if (!retriesLeft) throw error;\n\n    await sleep(RETRY_DELAY);\n\n    return this.blink(macAddress).catch(err =>\n      this.blinkWithRetries(macAddress, retriesLeft - 1, err)\n    );\n  };\n\n  updateLogIntervalWithRetries = async (\n    macAddress: MacAddress,\n    logInterval: number,\n    retriesLeft: number,\n    clearLogs: boolean,\n    error: Error | null\n  ): Promise<boolean> => {\n    if (!retriesLeft) throw error;\n\n    await sleep(RETRY_DELAY);\n\n    return this.updateLogInterval(macAddress, logInterval, clearLogs).catch(err =>\n      this.updateLogIntervalWithRetries(macAddress, logInterval, retriesLeft - 1, clearLogs, err)\n    );\n  };\n}\n"]}